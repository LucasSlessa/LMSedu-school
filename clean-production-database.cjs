const mysql = require('mysql2/promise');
require('dotenv').config();

async function cleanProductionDatabase() {
  let connection;
  
  try {
    // Conectar ao banco de dados
    connection = await mysql.createConnection({
      host: process.env.DB_HOST || 'localhost',
      user: process.env.DB_USER || 'root',
      password: process.env.DB_PASSWORD || '',
      database: process.env.DB_NAME || 'lms_database',
      multipleStatements: true
    });

    console.log('üîó Conectado ao banco de dados');
    console.log('‚ö†Ô∏è  ATEN√á√ÉO: Este script ir√° remover TODOS os cursos, pagamentos e matr√≠culas!');
    console.log('‚úÖ Usu√°rios e categorias ser√£o mantidos');
    
    // Desabilitar verifica√ß√µes de chave estrangeira
    await connection.execute('SET foreign_key_checks = 0');
    
    console.log('\nüßπ Iniciando limpeza do banco de dados...');
    
    // Remover dados de progresso e certificados
    console.log('üìä Removendo progresso e certificados...');
    await connection.execute('DELETE FROM lesson_progress');
    await connection.execute('DELETE FROM certificates');
    
    // Remover dados de quiz
    console.log('‚ùì Removendo dados de quiz...');
    await connection.execute('DELETE FROM quiz_answers');
    await connection.execute('DELETE FROM quiz_questions');
    
    // Remover dados de aulas e m√≥dulos
    console.log('üìö Removendo aulas e m√≥dulos...');
    await connection.execute('DELETE FROM course_lessons');
    await connection.execute('DELETE FROM course_modules');
    
    // Remover dados de matr√≠culas
    console.log('üéì Removendo matr√≠culas...');
    await connection.execute('DELETE FROM enrollments');
    
    // Remover dados de pagamentos e pedidos
    console.log('üí≥ Removendo pagamentos e pedidos...');
    await connection.execute('DELETE FROM order_items');
    await connection.execute('DELETE FROM orders');
    await connection.execute('DELETE FROM stripe_customers');
    
    // Remover dados de cursos
    console.log('üéØ Removendo cursos...');
    await connection.execute('DELETE FROM courses');
    
    // Reabilitar verifica√ß√µes de chave estrangeira
    await connection.execute('SET foreign_key_checks = 1');
    
    // Verificar dados mantidos
    console.log('\nüìã Verificando dados mantidos:');
    
    const [users] = await connection.execute('SELECT COUNT(*) as total FROM users');
    console.log(`üë• Usu√°rios mantidos: ${users[0].total}`);
    
    const [categories] = await connection.execute('SELECT COUNT(*) as total FROM categories');
    console.log(`üìÇ Categorias mantidas: ${categories[0].total}`);
    
    const [courses] = await connection.execute('SELECT COUNT(*) as total FROM courses');
    console.log(`üéØ Cursos restantes: ${courses[0].total}`);
    
    const [orders] = await connection.execute('SELECT COUNT(*) as total FROM orders');
    console.log(`üõí Pedidos restantes: ${orders[0].total}`);
    
    const [enrollments] = await connection.execute('SELECT COUNT(*) as total FROM enrollments');
    console.log(`üéì Matr√≠culas restantes: ${enrollments[0].total}`);
    
    console.log('\n‚úÖ Limpeza do banco de dados conclu√≠da com sucesso!');
    console.log('üîÑ O sistema est√° pronto para testes em produ√ß√£o');
    
  } catch (error) {
    console.error('‚ùå Erro durante a limpeza do banco:', error);
    process.exit(1);
  } finally {
    if (connection) {
      await connection.end();
      console.log('üîå Conex√£o com banco de dados encerrada');
    }
  }
}

// Executar apenas se chamado diretamente
if (require.main === module) {
  cleanProductionDatabase();
}

module.exports = { cleanProductionDatabase };
